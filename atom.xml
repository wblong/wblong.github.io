<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unicorn</title>
  
  <subtitle>Nico the Unicorn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wblong.github.io/"/>
  <updated>2019-05-25T10:30:25.312Z</updated>
  <id>https://wblong.github.io/</id>
  
  <author>
    <name>Nico</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>条件变量(condition_variable)</title>
    <link href="https://wblong.github.io/2019/05/25/%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F-condition-variable/"/>
    <id>https://wblong.github.io/2019/05/25/条件变量-condition-variable/</id>
    <published>2019-05-25T10:08:00.000Z</published>
    <updated>2019-05-25T10:30:25.312Z</updated>
    
    <content type="html"><![CDATA[<h4 id="std-condition-variable"><a href="#std-condition-variable" class="headerlink" title="std::condition_variable"></a>std::condition_variable</h4><p><code>std::condition_variable</code>是条件变量,当<code>std::condition_variable</code>对象的某个<code>wait</code>函数被调用的时候，它使用 <code>std::unique_lock</code>(通过 <code>std::mutex</code>) 来锁住当前线程。当前线程会一直被阻塞，直到另外一个线程在相同的 <code>std::condition_variable</code> 对象上调用了<code>notification</code> 函数来唤醒当前线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;                // std::cout</span><br><span class="line">#include &lt;thread&gt;                // std::thread</span><br><span class="line">#include &lt;mutex&gt;                // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;condition_variable&gt;    // std::condition_variable</span><br><span class="line"></span><br><span class="line">std::mutex mtx; // 全局互斥锁.</span><br><span class="line">std::condition_variable cv; // 全局条件变量.</span><br><span class="line">bool ready = false; // 全局标志位.</span><br><span class="line"></span><br><span class="line">void do_print_id(int id)</span><br><span class="line">&#123;</span><br><span class="line">std::unique_lock &lt;std::mutex&gt; lck(mtx);</span><br><span class="line">while (!ready) // 如果标志位不为 true, 则等待...</span><br><span class="line">cv.wait(lck); // 当前线程被阻塞, 当全局标志位变为 true 之后,</span><br><span class="line">// 线程被唤醒, 继续往下执行打印线程编号id.</span><br><span class="line">std::cout &lt;&lt; &quot;thread &quot; &lt;&lt; id &lt;&lt; &apos;\n&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void go()</span><br><span class="line">&#123;</span><br><span class="line">std::unique_lock &lt;std::mutex&gt; lck(mtx);</span><br><span class="line">ready = true; // 设置全局标志位为 true.</span><br><span class="line">cv.notify_all(); // 唤醒所有线程.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">std::thread threads[10];</span><br><span class="line">// spawn 10 threads:</span><br><span class="line">for (int i = 0; i &lt; 10; ++i)</span><br><span class="line">threads[i] = std::thread(do_print_id, i);</span><br><span class="line">std::cout &lt;&lt; &quot;10 threads ready to race...\n&quot;;</span><br><span class="line">go(); // go!</span><br><span class="line">for (auto &amp; th : threads)</span><br><span class="line">th.join();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有当 pred 条件为false 时调用 wait() 才会阻塞当前线程，并且在收到其他线程的通知后只有当 pred 为 true 时才会被解除阻塞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;                // std::cout</span><br><span class="line">#include &lt;thread&gt;                // std::thread, std::this_thread::yield</span><br><span class="line">#include &lt;mutex&gt;                // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;condition_variable&gt;    // std::condition_variable</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line">int cargo = 0;</span><br><span class="line">bool shipment_available()</span><br><span class="line">&#123;</span><br><span class="line">return cargo != 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 消费者线程.</span><br><span class="line">void consume(int n)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">std::unique_lock &lt;std::mutex&gt; lck(mtx);</span><br><span class="line">cv.wait(lck, shipment_available);</span><br><span class="line">std::cout &lt;&lt; cargo &lt;&lt; &apos;\n&apos;;</span><br><span class="line">cargo = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">std::thread consumer_thread(consume, 10); // 消费者线程.</span><br><span class="line"></span><br><span class="line">// 主线程为生产者线程, 生产 10 个物品.</span><br><span class="line">for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">while (shipment_available())</span><br><span class="line">std::this_thread::yield();//让出CPU片</span><br><span class="line">std::unique_lock &lt;std::mutex&gt; lck(mtx);</span><br><span class="line">cargo = i + 1;</span><br><span class="line">cv.notify_one();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer_thread.join();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与<code>std::condition_variable::wait()</code> 类似，不过 <code>wait_for</code>可以指定一个时间段，在当前线程收到通知或者指定的时间 rel_time 超时之前，该线程都会处于阻塞状态。而一旦超时或者收到了其他线程的通知，<code>wait_for</code>返回，剩下的处理步骤和<code>wait()</code>类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;             // std::thread</span><br><span class="line">#include &lt;chrono&gt;             // std::chrono::seconds</span><br><span class="line">#include &lt;mutex&gt;              // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;condition_variable&gt; // std::condition_variable, std::cv_status</span><br><span class="line"></span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line">int value;</span><br><span class="line"></span><br><span class="line">void do_read_value()</span><br><span class="line">&#123;</span><br><span class="line">std::cin &gt;&gt; value;</span><br><span class="line">cv.notify_one();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; &quot;Please, enter an integer (I&apos;ll be printing dots): \n&quot;;</span><br><span class="line">std::thread th(do_read_value);</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::unique_lock&lt;std::mutex&gt; lck(mtx);</span><br><span class="line">while (cv.wait_for(lck, std::chrono::seconds(1)) == std::cv_status::timeout) &#123;</span><br><span class="line">std::cout &lt;&lt; &apos;.&apos;;</span><br><span class="line">std::cout.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; value &lt;&lt; &apos;\n&apos;;</span><br><span class="line"></span><br><span class="line">th.join();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="std-condition-variable-any"><a href="#std-condition-variable-any" class="headerlink" title="std::condition_variable_any"></a>std::condition_variable_any</h4><p>与 <code>std::condition_variable</code>类似，只不过<code>std::condition_variable_any</code>的 wait 函数可以接受任何 lockable参数，而 <code>std::condition_variable</code>只能接受 <code>std::unique_lock</code>类型的参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;std-condition-variable&quot;&gt;&lt;a href=&quot;#std-condition-variable&quot; class=&quot;headerlink&quot; title=&quot;std::condition_variable&quot;&gt;&lt;/a&gt;std::condition_vari
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++11" scheme="https://wblong.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>mutex互斥量与锁</title>
    <link href="https://wblong.github.io/2019/05/25/utex%E4%BA%92%E6%96%A5%E9%87%8F/"/>
    <id>https://wblong.github.io/2019/05/25/utex互斥量/</id>
    <published>2019-05-25T09:21:00.000Z</published>
    <updated>2019-05-25T10:07:47.079Z</updated>
    
    <content type="html"><![CDATA[<p><code>mutex</code> 互斥对象，保护代码片段同一时刻只被一个线程访问。<br><code>mutex</code> 可能在程序异常时无法释放锁。可以结合<code>unique_lock</code>和<code>std::lock_guard</code>使用来自动加锁和释放锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;mutex&gt;</span><br><span class="line">#include&lt;thread&gt;</span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line">static void print_block(int n, char c) &#123;</span><br><span class="line"> mtx.lock();</span><br><span class="line"> for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">  std::cout &lt;&lt; c;</span><br><span class="line"> &#125;</span><br><span class="line"> std::cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line"> mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int test_mutex_1() &#123;</span><br><span class="line"> std::thread th1(print_block, 50, &apos;*&apos;);</span><br><span class="line"> std::thread th2(print_block, 50, &apos;&amp;&apos;);</span><br><span class="line"> th1.join();</span><br><span class="line"> th2.join();</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void print_thread_id(int id) &#123;</span><br><span class="line"> mtx.lock();</span><br><span class="line"> std::cout &lt;&lt; &quot;thread #&quot; &lt;&lt; id &lt;&lt; &quot;\n&quot;;</span><br><span class="line"> mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int test_mutex_2() &#123;</span><br><span class="line"> std::thread threads[10];</span><br><span class="line"> for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">  threads[i] =  std::thread(print_thread_id, i + 1);</span><br><span class="line"> &#125;</span><br><span class="line"> for (auto&amp; th : threads) &#123;</span><br><span class="line">  th.join();</span><br><span class="line"> &#125;</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">volatile int counter(0);</span><br><span class="line">static void attempt_10k_increases() &#123;</span><br><span class="line"> for (int i = 0; i &lt; 10000; ++i) &#123;</span><br><span class="line">  </span><br><span class="line">  if (mtx.try_lock()) &#123;</span><br><span class="line">   ++counter;</span><br><span class="line">   mtx.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">  /*mtx.lock();</span><br><span class="line">  ++counter;</span><br><span class="line">  mtx.unlock();*/</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">int test_mutex_3()</span><br><span class="line">&#123;</span><br><span class="line"> std::thread threads[10];</span><br><span class="line"> // spawn 10 threads:</span><br><span class="line"> for (int i = 0; i &lt; 10; ++i)</span><br><span class="line">  threads[i] = std::thread(attempt_10k_increases);</span><br><span class="line"> for (auto&amp; th : threads) th.join();</span><br><span class="line"> std::cout &lt;&lt; counter &lt;&lt; &quot; successful increases of the counter.\n&quot;;</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int *argc,char*agv[]) &#123;</span><br><span class="line"> //test_mutex_1();</span><br><span class="line"> //test_mutex_2();</span><br><span class="line"> test_mutex_3();</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::lock_guard</code>简单锁，在构造函数中进行加锁，析构函数中进行解锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;mutex&gt;</span><br><span class="line">#include&lt;thread&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line">void add(int &amp;num, int&amp;sum) &#123;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">std::lock_guard&lt;std::mutex&gt;lk(mtx);</span><br><span class="line">if (num &lt; 100) &#123;</span><br><span class="line">++num;</span><br><span class="line">sum += num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int sum = 0, num = 0;</span><br><span class="line">std::vector&lt;std::thread&gt;ver_ths;</span><br><span class="line">for (int i = 0; i &lt; 20; ++i) &#123;</span><br><span class="line">std::thread th = std::thread(add, std::ref(num), std::ref(sum));</span><br><span class="line">// 较之push_back 只调用构造函数，没有移动构造函数，也没有拷贝构造函数</span><br><span class="line">ver_ths.emplace_back(std::move(th));</span><br><span class="line">&#125;</span><br><span class="line">//使用mem_fun来取指针并绑定到std::thread的成员函数</span><br><span class="line">std::for_each(ver_ths.begin(), ver_ths.end(), std::mem_fn(&amp;std::thread::join));</span><br><span class="line">std::cout &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::unique_lock</code>延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。<br><code>unique_lock</code>比<code>lock_guard</code>使用更加灵活，功能更加强大。<br>使用<code>unique_lock</code>需要付出更多的时间、性能成本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;       // std::cout</span><br><span class="line">#include &lt;thread&gt;         // std::thread</span><br><span class="line">#include &lt;mutex&gt;          // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;           // mutex for critical section</span><br><span class="line">std::once_flag flag;</span><br><span class="line"></span><br><span class="line">void print_block(int n, char c) &#123;</span><br><span class="line">//unique_lock有多组构造函数, 这里std::defer_lock不设置锁状态</span><br><span class="line">std::unique_lock&lt;std::mutex&gt; my_lock(mtx, std::defer_lock);</span><br><span class="line">//尝试加锁, 如果加锁成功则执行</span><br><span class="line">//(适合定时执行一个job的场景, 一个线程执行就可以, 可以用更新时间戳辅助)</span><br><span class="line">if (my_lock.try_lock()) &#123;</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">std::cout &lt;&lt; c;</span><br><span class="line">std::cout &lt;&lt; &apos;\n&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void run_one(int &amp;n) &#123;</span><br><span class="line">std::call_once(flag, [&amp;n] &#123;n = n + 1; &#125;); //只执行一次, 适合延迟加载; 多线程static变量情况</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">std::vector&lt;std::thread&gt; ver;</span><br><span class="line">int num = 0;</span><br><span class="line">for (auto i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">ver.emplace_back(print_block, 50, &apos;*&apos;);</span><br><span class="line">ver.emplace_back(run_one, std::ref(num));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (auto &amp;t : ver) &#123;</span><br><span class="line">t.join();</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;mutex&lt;/code&gt; 互斥对象，保护代码片段同一时刻只被一个线程访问。&lt;br&gt;&lt;code&gt;mutex&lt;/code&gt; 可能在程序异常时无法释放锁。可以结合&lt;code&gt;unique_lock&lt;/code&gt;和&lt;code&gt;std::lock_guard&lt;/code&gt;
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++11" scheme="https://wblong.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>intialization list 和 assignment</title>
    <link href="https://wblong.github.io/2019/05/07/intialization-list-%E5%92%8C-assignment/"/>
    <id>https://wblong.github.io/2019/05/07/intialization-list-和-assignment/</id>
    <published>2019-05-07T14:32:00.000Z</published>
    <updated>2019-05-07T14:50:56.099Z</updated>
    
    <content type="html"><![CDATA[<pre><code>intialization list指的是初始化列表.Assignment 指的是赋值.</code></pre><h4 id="什么是初始化列表"><a href="#什么是初始化列表" class="headerlink" title="什么是初始化列表"></a>什么是初始化列表</h4><p> 构造函数除了有名字，参数列表和函数体之外，还可以有初始化列表，初始化列表以冒号开头，后跟一系列以逗号分隔的初始化字段。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> class foo</span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int id;</span><br><span class="line">    foo(string s, int i):name(s), id(i)&#123;&#125; ; //初始化列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造函数的两个执行阶段："><a href="#构造函数的两个执行阶段：" class="headerlink" title="构造函数的两个执行阶段："></a>构造函数的两个执行阶段：</h4><p>构造函数的执行可以分为两个阶段，初始化阶段和计算阶段。初始化阶段先于计算阶段。</p><h6 id="初始化阶段："><a href="#初始化阶段：" class="headerlink" title="初始化阶段："></a>初始化阶段：</h6><p>所有类类型的成员都会在初始化阶段被初始化，即使该成员没有出现在构造函数的初始化列表中.</p><h6 id="计算阶段："><a href="#计算阶段：" class="headerlink" title="计算阶段："></a>计算阶段：</h6><p>一般用于执行构造函数体内的赋值操作.</p><p>下面代码定义两个类，Test1有构造函数，拷贝构造函数及赋值运算符。（为方便查看结果）</p><p>Test2是测试类，它以Test1的对象为成员.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">class Test1</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">        Test1()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;Construct Test1&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Test1(const Test1&amp; t1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;Copy Construct for Test1&quot; &lt;&lt; endl;</span><br><span class="line">            this-&gt;a = t1.a; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Test1&amp; operator = (const Test1&amp; t1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;assignment for Test1&quot; &lt;&lt; endl;</span><br><span class="line">            this-&gt;a = t1.a;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    private:    </span><br><span class="line">        int a;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Test2</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">        Test2(Test1&amp; t1)</span><br><span class="line">        &#123;</span><br><span class="line">            test1 = t1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    private:</span><br><span class="line">        Test1 test1;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Test1 t1;</span><br><span class="line">    Test2 t2(t1);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Construct Test1</span><br><span class="line">Construct Test1</span><br><span class="line">assignment for Test1</span><br></pre></td></tr></table></figure><p>结果解释：</p><p>第一行输出对应调用代码中第一行，构造一个Test1对象。</p><p>第二行输出对应Test2构造函数中的代码，用默认的构造函数初始化对象test1，这就是所谓的初始化阶段。</p><p>第三行输出对应Test1的赋值运算符中代码，对test1执行赋值操作，这就是所谓的计算阶段。</p><h4 id="为什么使用初始化列表："><a href="#为什么使用初始化列表：" class="headerlink" title="为什么使用初始化列表："></a>为什么使用初始化列表：</h4><p>初始化类的成员有两种方式：</p><ul><li>使用初始化列表</li><li>在构造函数体内进行赋值</li></ul><p>主要是基于一个性能的问题.对于内置类型（int,float,double…），使用初始化列表和在构造函数体内初始化，差别不大。但是对于类类型来说，最好使用初始化列表.</p><p>修改上面的代码：(只修改了Test2这个类)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Test2</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Test2(Test1&amp; t1):test1(t1) </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">Test1 test1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Construct Test1</span><br><span class="line">Copy Construct for Test1</span><br></pre></td></tr></table></figure><p>结果解释：</p><p>第一行输出对应 main函数的第一行.</p><p>第二行输出对应Test2的初始化列表，直接调用拷贝构造函数初始化test1，省去了调用默认构造函数的过程。所以一个好的原则是：能使用初始化列表的时候尽量使用初始化列表.</p><h4 id="哪些情况下必须使用初始化列表："><a href="#哪些情况下必须使用初始化列表：" class="headerlink" title="哪些情况下必须使用初始化列表："></a>哪些情况下必须使用初始化列表：</h4><p>除了前面提到的性能之外，在部分情况下是必须使用初始化列表的：</p><ul><li>常量成员.因为常量只能初始化而不能赋值，所以必须使用初始化列表</li><li>引用类型.必须在定义的时候初始化，并且不能重新赋值，所以要写在初始化列表里面.</li><li>没有默认构造函数的类类型.因为使用初始化列表可以不必调用默认的构造函数来初始化，而是直接调用拷贝构造函数来初始化.</li></ul><p>对于没有默认构造函数的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Test1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Test1(int a):a(a)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Test2</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Test2(Test1 &amp;t1)</span><br><span class="line">&#123;</span><br><span class="line">test1 = t1;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">Test1 test1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Test1 t1(1);</span><br><span class="line">Test2 t2(t1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码无法通过编译，因为Test2的构造函数中test1 = t1这一行实际上分成两步执行。</p><ul><li>调用Test1的默认构造函数来初始化test1</li><li>调用Test1的赋值运算符给test1赋值</li></ul><p>但是由于Test1没有默认的构造函数，所谓第一步无法执行，故而编译错误。</p><p>正确的代码如下，使用初始化列表代替赋值操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Test2</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Test2(Test1 &amp;t1):test1(t1) </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">Test1 test1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="成员变量的初始化顺序："><a href="#成员变量的初始化顺序：" class="headerlink" title="成员变量的初始化顺序："></a>成员变量的初始化顺序：</h4><p>成员是按他们在类中出现的顺序初始化的.而不是按初始化列表的顺序.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Type</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int i;</span><br><span class="line">int j;</span><br><span class="line"></span><br><span class="line">Type(int x):i(x),j(i)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Type type(1);</span><br><span class="line">cout &lt;&lt; type.i &lt;&lt; type.j &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试比较上下两段代码的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Type</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int i;</span><br><span class="line">int j;</span><br><span class="line"></span><br><span class="line">Type(int x):j(x),i(j)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Type type(1);</span><br><span class="line">cout &lt;&lt; type.i &lt;&lt; type.j &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的输出结果是：11。</p><p>下面代码的输出结果是：01。</p><p>结果解释：</p><p>这里i的值是未定义的（默认为0）因为虽然j在初始化列表里面出现在i前面，但是i先于j定义。</p><p>所以先初始化i，但i由j初始化，此时j尚未初始化，所以导致i的值为默认的0。</p><p>所以可以看出，是按定义顺序而不是初始化列表的顺序进行初始化的。</p><p>所以，一个好的习惯是，按照成员定义的顺序进行初始化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;intialization list指的是初始化列表.
Assignment 指的是赋值.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;什么是初始化列表&quot;&gt;&lt;a href=&quot;#什么是初始化列表&quot; class=&quot;headerlink&quot; title=&quot;什么是初始化
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wblong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>实现string类及右值和左值</title>
    <link href="https://wblong.github.io/2019/05/06/%E7%8E%B0string%E7%B1%BB/"/>
    <id>https://wblong.github.io/2019/05/06/现string类/</id>
    <published>2019-05-06T13:37:00.000Z</published>
    <updated>2019-05-06T14:48:17.613Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class string</span><br><span class="line">&#123;</span><br><span class="line">public：</span><br><span class="line">  String()    //初始化</span><br><span class="line">  : _pstr(new char[1])</span><br><span class="line">  &#123;&#125;</span><br><span class="line"> </span><br><span class="line">String(const char * pstr );     //普通构造函数</span><br><span class="line">: _pstr(new char[strlen(pstr) + 1]())</span><br><span class="line">&#123;</span><br><span class="line">　　strcpy(_pstr,pstr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">String(const String &amp; rhs); //复制构造函数（深度拷贝）</span><br><span class="line">: _pstr(new char[strlen(pstr) + 1]())</span><br><span class="line">&#123;</span><br><span class="line">　　strcpy(_pstr, rhs.pstr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">String(String &amp;&amp; rhs);  //移动构造函数,右值引用</span><br><span class="line">: _pstr(rhs._pstr)</span><br><span class="line">&#123;</span><br><span class="line">　　rhs.pstr = NULL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">String &amp; operator=(const String &amp; rhs)  //重载赋值运算符函数</span><br><span class="line">&#123;</span><br><span class="line">　　if(this != &amp; rhs)</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　delete [] _pstr;</span><br><span class="line">　　　　_pstr = new char[strlen(rhs._pstr) + 1]();</span><br><span class="line">　　　　strcpy(_pstr, rhs._pstr);</span><br><span class="line">　　&#125;</span><br><span class="line">　　return *this;</span><br><span class="line">&#125;</span><br><span class="line">String &amp; operator=(String &amp;&amp; rhs) //移动赋值运算符函数</span><br><span class="line">&#123;</span><br><span class="line">　　if(this != &amp;rhs)</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　delete [] _pstr;</span><br><span class="line">　　　　_pstr = rhs._pstr;</span><br><span class="line">　　　　rhs._pstr = NULL;</span><br><span class="line">　　&#125;</span><br><span class="line">　　return * this;</span><br><span class="line">&#125;</span><br><span class="line"> //析构函数</span><br><span class="line">~String()</span><br><span class="line">&#123;</span><br><span class="line">　　delete [] _pstr;</span><br><span class="line">&#125;</span><br><span class="line"> //重载输出流运算符友元函数</span><br><span class="line">　　friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp; os, const String &amp; rhs);</span><br><span class="line">  </span><br><span class="line">private:</span><br><span class="line">　　char * _pstr;//私有数据成员</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">std::ostream &amp; operator&lt;&lt;(std::ostream &amp; os, const String &amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">　　os &lt;&lt; rhs._pstr;</span><br><span class="line">　　return os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void f_ck(int &amp; i) &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    f_ck(1); // 编译不通过，VS答曰：非常量的引用值必须是左值。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><pre><code>&amp; 是左值引用    ，所谓左值就是实际在运行时内存中存在的值，而不是 1 这种写死在运行代码中的值。</code></pre><h4 id="返回引用的生命周期问题"><a href="#返回引用的生命周期问题" class="headerlink" title="返回引用的生命周期问题"></a>返回引用的生命周期问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Good &#123;</span><br><span class="line">public:</span><br><span class="line">    string goodname;</span><br><span class="line">    Good() &#123;</span><br><span class="line">        goodname = &quot;not_good&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;Good constructed&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Good() &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Good destoyed&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Warehouse &#123;</span><br><span class="line">public:</span><br><span class="line">    Good &amp; good;</span><br><span class="line">    Warehouse(Good &amp; good) : good(good)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //错误将栈变量赋值给左值引用，栈的生命周期要小于左值引用</span><br><span class="line">    static Warehouse* WarehouseBuilder() &#123;</span><br><span class="line">        Good good;</span><br><span class="line">        return new Warehouse(good);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;   </span><br><span class="line">    Warehouse * warehouse = Warehouse::WarehouseBuilder();</span><br><span class="line">    cout &lt;&lt; warehouse-&gt;good.goodname &lt;&lt; endl;</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>&amp;&amp;，就是右值引用了，右值是出现在等式右边的值。 右值 &amp;&amp; 显然不能放在等号左边。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Whore &#123;</span><br><span class="line">public:</span><br><span class="line">    string nickname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Brothel &#123;</span><br><span class="line">public: </span><br><span class="line">    Whore &amp;&amp; whore_;</span><br><span class="line">    Brothel(Whore &amp;&amp; whore): whore_(whore) &#123; //编译不通过，无法将右值引用绑定到左值</span><br><span class="line">    &#125;</span><br><span class="line">//whore_=whore 不能</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相似的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Whore &#123;</span><br><span class="line">public:</span><br><span class="line">    string nickname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Brothel &#123;</span><br><span class="line">public: </span><br><span class="line">    Whore &amp;&amp; whore_;</span><br><span class="line">    Brothel(Whore &amp;&amp; whore) &#123; // 编译不通过，“Brothel::whore_”: 必须初始化引用</span><br><span class="line">        whore_ = whore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Whore &#123;</span><br><span class="line">public:</span><br><span class="line">    string nickname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Brothel &#123;</span><br><span class="line">public: </span><br><span class="line">    Whore &amp; whore_;</span><br><span class="line">    Brothel(Whore &amp;&amp; whore): whore_(whore) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    Whore &amp;&amp; whore = Whore();</span><br><span class="line">    Brothel(whore); // 编译不通过</span><br><span class="line">...</span><br></pre></td></tr></table></figure><pre><code>用 type &amp;&amp; r 去引用一个匿名的右值（右值当然是匿名的），确实延长了其生命周期，但是这有个限度，就是不能超过栈的生命周期。c++ 中的左值就像指针，它可以捕获实实在在的实体，但是我们要注意被捕获值的生命周期。不要随便把生命周期和栈同步的实体传给了它； 右值其实也是指针，但是它功能是专门捕获匿名的实体（可以理解为编译产生的中间变量）。同时我们要注意，右值在定义时捕获了实体以后，右值的名字就变成了被捕获的实体。一个左值表达式代表的是对象本身，而右值表达式代表的是对象的值；变量也是左值。</code></pre><ul><li>绑定的对象（引用的对象）不同，左值引用绑定的是返回左值引用的函数、赋值、下标、解引用、前置递增递减</li></ul><ul><li><p>左值持久，右值短暂，右值只能绑定到临时对象，所引用的对象将要销毁或该对象没有其他用户</p></li><li><p>使用右值引用的代码可以自由的接管所引用对象的内容</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;  // 在这条语句中，i 是左值，0 是临时值，就是右值。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int &amp;a = 1;   // error C2440: “初始化”: 无法从“int”转换为“int &amp;”</span><br><span class="line">1</span><br><span class="line">我们最多只能用常量引用来绑定一个右值，如：</span><br></pre></td></tr></table></figure><p>在C++11中，我们可以引用右值，使用&amp;&amp;来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int &amp;&amp;a = 1;</span><br></pre></td></tr></table></figure></p><pre><code>临时对象被使用完之后会被立即析构，在析构函数中free掉申请的内存资源。 如果能够直接使用临时对象已经申请的资源，并在其析构函数中取消对资源的释放，这样既能节省资源，有能节省资源申请和释放的时间。右值引用并不能阻止编译器在临时对象使用完之后将其释放掉的事实，所以转移构造函数和转移赋值操作符重载函数 中都将_data赋值为了NULL，而且析构函数中保证了_data != NULL才会释放。   标准库提供了函数 std::move，这个函数以非常简单的方式将左值引用转换为右值引用。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt; </span><br><span class="line">void swap(T&amp; a, T&amp; b) </span><br><span class="line">&#123; </span><br><span class="line">    T tmp(a);   // copy a to tmp </span><br><span class="line">    a = b;      // copy b to a </span><br><span class="line">    b = tmp;    // copy tmp to b </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void swap(T&amp; a, T&amp; b) </span><br><span class="line">&#123; </span><br><span class="line">    T tmp(std::move(a)); // move a to tmp </span><br><span class="line">    a = std::move(b);    // move b to a </span><br><span class="line">    b = std::move(tmp);  // move tmp to b </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wblong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++前置与后置</title>
    <link href="https://wblong.github.io/2019/05/06/%E5%89%8D%E7%BD%AE%E4%B8%8E%E5%90%8E%E7%BD%AE/"/>
    <id>https://wblong.github.io/2019/05/06/前置与后置/</id>
    <published>2019-05-06T13:22:00.000Z</published>
    <updated>2019-05-06T13:32:09.818Z</updated>
    
    <content type="html"><![CDATA[<pre><code>对于迭代器和其他模板对象使用前缀形式 (++i) 的自增, 自减运算符，理由是 前置自增 (++i) 通常要比后置自增 (i++) 效率更高。  ++a表示取a的地址，增加它的内容，然后把值放在寄存器中； a++表示取a的地址，把它的值装入寄存器，然后增加内存中的a的值；</code></pre><h4 id="前缀与后缀运算符重载"><a href="#前缀与后缀运算符重载" class="headerlink" title="前缀与后缀运算符重载"></a>前缀与后缀运算符重载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Age     </span><br><span class="line">&#123;     </span><br><span class="line">public:     </span><br><span class="line">    </span><br><span class="line">    Age&amp; operator++() //前置++     </span><br><span class="line">    &#123;     </span><br><span class="line">        ++i;     </span><br><span class="line">        return *this;     </span><br><span class="line">    &#125;     </span><br><span class="line">    </span><br><span class="line">    const Age operator++(int) //后置++     </span><br><span class="line">   &#123;     </span><br><span class="line">        Age tmp = *this;     </span><br><span class="line">        ++(*this);  //利用前置++     </span><br><span class="line">        return tmp;     </span><br><span class="line">    &#125;     </span><br><span class="line">    </span><br><span class="line">    Age&amp; operator=(int i) //赋值操作     </span><br><span class="line">    &#123;     </span><br><span class="line">        this-&gt;i = i;     </span><br><span class="line">        return *this;     </span><br><span class="line">    &#125;     </span><br><span class="line">    </span><br><span class="line">private:     </span><br><span class="line">    int i;     </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">int main()     </span><br><span class="line">&#123;     </span><br><span class="line">    Age a;     </span><br><span class="line">    </span><br><span class="line">    (a++)++;  //编译错误   (右值)    </span><br><span class="line">    ++(a++);  //编译错误  （右值）   </span><br><span class="line">    a++ = 1;   //编译错误 （右值）  </span><br><span class="line">    (++a)++;  //OK     </span><br><span class="line">    ++(++a);  //OK     </span><br><span class="line">    ++a = 1;   //OK     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>a++的类型是const Age，返回的是右值，自然不能对它进行前置++、后置++、赋值等操作。同时会产生临时对象。++a的类型是Age&amp;，返回的是左值，当然可以对它进行前置++、后置++、赋值等操作所以，在非内置类型的时候，尽量使用前置++，因为效率高（后置自增，效率低）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;对于迭代器和其他模板对象使用前缀形式 (++i) 的自增, 自减运算符，理由是 前置自增 (++i) 通常要比后置自增 (i++) 效率更高。

  ++a表示取a的地址，增加它的内容，然后把值放在寄存器中；
 a++表示取a的地址，把它的值装入寄存器，然后
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wblong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++内存对齐</title>
    <link href="https://wblong.github.io/2019/05/04/-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>https://wblong.github.io/2019/05/04/-内存对齐/</id>
    <published>2019-05-04T02:45:00.000Z</published>
    <updated>2019-05-04T06:09:18.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存对齐规律"><a href="#内存对齐规律" class="headerlink" title="内存对齐规律"></a>内存对齐规律</h2><ul><li><p>各成员变量存放的起始地址相对于结构的起始地址的偏移量必须为该变量的类型所占用的字节数的倍数。</p></li><li><p>各成员变量在存放的时候根据在结构中出现的顺序依次申请空间，同时按照上面的对齐方式调整位置，空缺的字节自动填充。</p></li><li><p>同时为了确保结构的大小为结构的字节边界数（即该结构中占用最大空间的类型所占用的字节数）的倍数，所以在为最后一个成员变量申请空间后，还会根据需要自动填充空缺的字节。</p></li></ul><p>1、  对于结构的各个成员，第一个成员位于偏移为0的位置，以后每个数据成员的偏移量必须是min(#pragma pack()指定的数，这个数据成员的自身长度) 的倍数。</p><p>2、  在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐将按照#pragma pack指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> using namespace std;</span><br><span class="line"></span><br><span class="line"> struct Test</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line"> int a; //4</span><br><span class="line"> char b;//1+1</span><br><span class="line"> short c;//2</span><br><span class="line"> char d;//1+3</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> struct Test1</span><br><span class="line"> &#123;</span><br><span class="line"> int a; //4</span><br><span class="line"> char b;//1+1</span><br><span class="line"> short c;//2</span><br><span class="line"> char d;//1+6</span><br><span class="line"> double t;//8</span><br><span class="line"> &#125;;</span><br><span class="line">struct X1</span><br><span class="line"> &#123;</span><br><span class="line">int i;//4个字节</span><br><span class="line">char c1;//1个字节</span><br><span class="line">char c2;//1个字节</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> struct X2</span><br><span class="line"> &#123;</span><br><span class="line">char c1;//1个字节</span><br><span class="line">int i;//4个字节</span><br><span class="line">char c2;//1个字节</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> struct X3</span><br><span class="line"> &#123;</span><br><span class="line">char c1;//1个字节</span><br><span class="line">char c2;//1个字节</span><br><span class="line">int i;//4个字节</span><br><span class="line">&#125;;</span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line">cout &lt;&lt; &quot;long &quot; &lt;&lt; sizeof(long) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;float &quot; &lt;&lt; sizeof(float) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;int &quot; &lt;&lt; sizeof(int) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;char &quot; &lt;&lt; sizeof(char) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;double &quot; &lt;&lt; sizeof(double) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">X1 x1;</span><br><span class="line">X2 x2;</span><br><span class="line">X3 x3;</span><br><span class="line">Test t;</span><br><span class="line">Test1 t1;</span><br><span class="line">cout &lt;&lt; &quot;x1 的大小 &quot; &lt;&lt; sizeof(x1) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;x2 的大小 &quot; &lt;&lt; sizeof(x2) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;x3 的大小 &quot; &lt;&lt; sizeof(x3) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;t 的大小 &quot; &lt;&lt; sizeof(t) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">cout &lt;&lt; &quot;t1 的大小 &quot; &lt;&lt; sizeof(t1) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">long 4</span><br><span class="line">float 4</span><br><span class="line">int 4</span><br><span class="line">char 1</span><br><span class="line">double 8</span><br><span class="line"></span><br><span class="line">x1 的大小 8</span><br><span class="line">x2 的大小 12</span><br><span class="line">x3 的大小 8</span><br><span class="line">t 的大小 12</span><br><span class="line">t1 的大小 24</span><br></pre></td></tr></table></figure></p><h2 id="设置内存对齐字节数"><a href="#设置内存对齐字节数" class="headerlink" title="设置内存对齐字节数"></a>设置内存对齐字节数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(4)  //sizeof(Test1)=28</span><br><span class="line">#pragma pack(8)  //sizeof(Test1)=32 VS 默认</span><br><span class="line"></span><br><span class="line">struct Test1  </span><br><span class="line">&#123;  </span><br><span class="line">    char c;  </span><br><span class="line">    short sh;  </span><br><span class="line">    int a;  </span><br><span class="line">    float f;  </span><br><span class="line">    int *p;  </span><br><span class="line">    char *s;  </span><br><span class="line">    double d;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于静态变量static"><a href="#关于静态变量static" class="headerlink" title="关于静态变量static"></a>关于静态变量static</h2><p>静态变量的存放位置与结构体实例的存储地址无关，是单独存放在静态数据区的，因此用siezof计算其大小时没有将静态成员所占的空间计算进来。</p><h2 id="关于类"><a href="#关于类" class="headerlink" title="关于类"></a>关于类</h2><p>空类是会占用内存空间的，而且大小是1，原因是C++要求每个实例在内存中都有独一无二的地址。</p><p>（一）类内部的成员变量：</p><ul><li>普通的变量：是要占用内存的，但是要注意对齐原则（这点和struct类型很相似）。</li><li>static修饰的静态变量：不占用内容，原因是编译器将其放在全局变量区。</li></ul><p>（二）类内部的成员函数：</p><ul><li>普通函数：不占用内存。</li><li>虚函数：要占用4个字节，用来指定虚函数的虚拟函数表的入口地址。所以一个类的虚函数所占用的地址是不变的，和虚函数的个数是没有关系的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//sizeof(cBase)=1</span><br><span class="line">#pragma pack(4)  </span><br><span class="line">class cBase&#123;&#125;;</span><br></pre></td></tr></table></figure><p>不包含虚函数时，对于类中的成员变量按结构体对齐方式处理，普通函数函数不占内存。sizeof(CBase1)=8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(4)  </span><br><span class="line">class CBase1  </span><br><span class="line">&#123;  </span><br><span class="line">private:  </span><br><span class="line">    char c;  </span><br><span class="line">    short sh;  </span><br><span class="line">    int a;  </span><br><span class="line">public:  </span><br><span class="line">    void fOut()&#123; cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl; &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>包含虚函数时，类中需要保存虚函数表的入口地址指针，即需要多保存一个指针。这个值跟虚函数的个数多少没有关系。sizeof(CBase2)=12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(4)  </span><br><span class="line">class CBase2  </span><br><span class="line">&#123;  </span><br><span class="line">private:  </span><br><span class="line">    char c;  </span><br><span class="line">    short sh;  </span><br><span class="line">    int a;  </span><br><span class="line">public:  </span><br><span class="line">    virtual void fOut()&#123; cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl; &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>子类所占内存大小是父类+自身成员变量的值。特别注意的是，子类与父类共享同一个虚函数指针，因此当子类新声明一个虚函数时，不必在对其保存虚函数表指针入口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(4)  </span><br><span class="line">class CBase2  </span><br><span class="line">&#123;  </span><br><span class="line">private:  </span><br><span class="line">    char c;  </span><br><span class="line">    short sh;  </span><br><span class="line">    int a;  </span><br><span class="line">public:  </span><br><span class="line">    virtual void fOut()&#123; cout &lt;&lt; &quot;virtual 1&quot; &lt;&lt; endl; &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">class cDerive :public CBase  </span><br><span class="line">&#123;  </span><br><span class="line">private :  </span><br><span class="line">    int n;  </span><br><span class="line">public:  </span><br><span class="line">    virtual void fPut()&#123; cout &lt;&lt; &quot;virtual 2&quot;; &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存对齐规律&quot;&gt;&lt;a href=&quot;#内存对齐规律&quot; class=&quot;headerlink&quot; title=&quot;内存对齐规律&quot;&gt;&lt;/a&gt;内存对齐规律&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;各成员变量存放的起始地址相对于结构的起始地址的偏移量必须为该变量的类型所占用的字节数的倍数
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wblong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Gulp介绍与Hexo优化</title>
    <link href="https://wblong.github.io/2019/05/04/Gulp%E4%BB%8B%E7%BB%8D%E4%B8%8EHexo%E4%BC%98%E5%8C%96/"/>
    <id>https://wblong.github.io/2019/05/04/Gulp介绍与Hexo优化/</id>
    <published>2019-05-04T02:16:00.000Z</published>
    <updated>2019-05-04T02:41:01.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Gulp"><a href="#什么是Gulp" class="headerlink" title="什么是Gulp"></a>什么是Gulp</h2><p><code>gulp.js</code>是一种基于流的，代码优于配置的新一代构建工具。<code>Gulp</code>和<code>Grunt</code>类似。但相比于<code>Grunt</code>的频繁的I/O操作，Gulp的流操作，能更快完成构建。</p><h2 id="Gulp特性"><a href="#Gulp特性" class="headerlink" title="Gulp特性"></a>Gulp特性</h2><ul><li><p>使用方便</p><p>  通过代码优于配置的策略，<code>Gulp</code>可以让简单的任务简单，复杂的任务更可管理。</p></li><li><p>构建快速</p><p>  通过流式操作，减少频繁的 IO 操作，更快地构建项目。</p></li><li><p>插件高质</p><p>  Gulp 有严格的插件指导策略，确保插件能简单高质的工作。</p></li><li><p>易于学习</p><p>  少量的API，掌握Gulp可以毫不费力。构建就像流管道一样，轻松加愉快。</p></li></ul><h2 id="Gulp安装"><a href="#Gulp安装" class="headerlink" title="Gulp安装"></a>Gulp安装</h2><p>Gulp是基于Node.js的，故要首先安装 Node.js。</p><p><code>npm install -g gulp</code></p><p>然后按以下清单文件安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line">gulp-htmlclean</span><br><span class="line">gulp-htmlmin</span><br><span class="line">gulp-minify-css</span><br><span class="line">gulp-uglify</span><br></pre></td></tr></table></figure></p><p>方法是同样的,npm install xxx –save，xxx即为清单列表文件名。<br>其中gulp是工程的核心程序，Gulp采用插件方式进行工作，下面的5个文件就是基于Gulp的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br></pre></td></tr></table></figure><h2 id="使用Gulp优化Hexo"><a href="#使用Gulp优化Hexo" class="headerlink" title="使用Gulp优化Hexo"></a>使用Gulp优化Hexo</h2><p>建立gulpfile.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">    //Plugins模块获取</span><br><span class="line">    var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">    var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">    var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">    var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line"></span><br><span class="line">    // 压缩 public 目录 css文件</span><br><span class="line">    gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">        return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">            .pipe(minifycss())</span><br><span class="line">            .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 压缩 public 目录 html文件</span><br><span class="line">    gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">      return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">             removeComments: true,</span><br><span class="line">             minifyJS: true,</span><br><span class="line">             minifyCSS: true,</span><br><span class="line">             minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 压缩 public/js 目录 js文件</span><br><span class="line">    gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">        return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">            .pipe(uglify())</span><br><span class="line">            .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line">    //4.0以前的写法 </span><br><span class="line">    //gulp.task(&apos;default&apos;, [</span><br><span class="line">      //  &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;</span><br><span class="line">    //]);</span><br><span class="line">    //4.0以后的写法</span><br><span class="line">    // 执行 gulp 命令时执行的任务</span><br><span class="line">    gulp.task(&apos;default&apos;, gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, function() &#123;</span><br><span class="line">      // Do something after a, b, and c are finished.</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>要运行gulp任务，只需切换到存放gulpfile.js文件的目录，然后在终端中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如gulp task1，如果没有指定任务名，则会执行任务名为default的默认任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo clean //先清除public目录</span><br><span class="line">hexo g     //生成发布文件</span><br><span class="line">gulp       //压缩代码</span><br><span class="line">hexo d     //发布</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Gulp&quot;&gt;&lt;a href=&quot;#什么是Gulp&quot; class=&quot;headerlink&quot; title=&quot;什么是Gulp&quot;&gt;&lt;/a&gt;什么是Gulp&lt;/h2&gt;&lt;p&gt;&lt;code&gt;gulp.js&lt;/code&gt;是一种基于流的，代码优于配置的新一代构建工具。&lt;code&gt;G
      
    
    </summary>
    
      <category term="Hexo" scheme="https://wblong.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wblong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-admin设置用户名及密码</title>
    <link href="https://wblong.github.io/2019/05/01/hexo-admin%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E5%AF%86%E7%A0%81/"/>
    <id>https://wblong.github.io/2019/05/01/hexo-admin设置用户名及密码/</id>
    <published>2019-05-01T08:13:00.000Z</published>
    <updated>2019-05-04T02:03:45.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h2><h5 id="安装并使用hexo-admin"><a href="#安装并使用hexo-admin" class="headerlink" title="安装并使用hexo-admin"></a>安装并使用hexo-admin</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure><h4 id="设置后台密码"><a href="#设置后台密码" class="headerlink" title="设置后台密码"></a>设置后台密码</h4><p>修改站点配置文件<code>_config.yml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># admin</span><br><span class="line">admin:</span><br><span class="line">  username: ****</span><br><span class="line">  password_hash: ZwrRbx0gZl8myLbI9/oA4T4TxgSxE.</span><br><span class="line">  secret: *****</span><br></pre></td></tr></table></figure></p><ul><li>username是用户名</li><li>password_hash是密码的哈希映射值，由于不同版本的node.js的哈希算法是不一样的，所有用以下方法来产生有效的密码哈希值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; const bcrypt = require(&apos;bcrypt-nodejs&apos;)</span><br><span class="line">&gt; bcrypt.hashSync(&apos;your password secret here!&apos;)</span><br><span class="line">//=&gt; &apos;$2a$10$8f0CO288aEgpb0BQk0mAEOIDwPS.s6nl703xL6PLTVzM.758x8xsi&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装hexo插件&quot;&gt;&lt;a href=&quot;#安装hexo插件&quot; class=&quot;headerlink&quot; title=&quot;安装hexo插件&quot;&gt;&lt;/a&gt;安装hexo插件&lt;/h2&gt;&lt;h5 id=&quot;安装并使用hexo-admin&quot;&gt;&lt;a href=&quot;#安装并使用hexo-admi
      
    
    </summary>
    
      <category term="Hexo" scheme="https://wblong.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wblong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title> Javascript call 用法及好处</title>
    <link href="https://wblong.github.io/2019/04/27/Javascript-call-%E7%94%A8%E6%B3%95%E5%8F%8A%E5%A5%BD%E5%A4%84/"/>
    <id>https://wblong.github.io/2019/04/27/Javascript-call-用法及好处/</id>
    <published>2019-04-27T15:02:00.000Z</published>
    <updated>2019-04-27T15:13:26.717Z</updated>
    
    <content type="html"><![CDATA[<p>call 可以改变当前函数的作用域</p><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Person(name)&#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say=function()&#123;</span><br><span class="line">console.log(&quot;My name is&quot;+this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person =new Person(&quot;Mike&quot;);</span><br><span class="line">person.say();//My name is Mike</span><br><span class="line"></span><br><span class="line">var student=&#123;name:&apos;Marry&apos;&#125;;</span><br><span class="line">person.call(student);// My name is Marry</span><br></pre></td></tr></table></figure><h6 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h6><pre><code>使用call方法防止调用对象的原型方法被改变</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var slice=[].slice;//(保存未修改前的)</span><br><span class="line">Array.prototype.slice=function(index)&#123;</span><br><span class="line">console.log(&apos;我是改写的slice方法&apos;+index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var array=[1,2,3,4];</span><br><span class="line">slice.call(array,3);//print out 4 (未修改前的)</span><br><span class="line">array.slice(3);// print out 我是改写的slice方法4 (原型方法被修改掉了)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;call 可以改变当前函数的作用域&lt;/p&gt;
&lt;h6 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h6&gt;   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://wblong.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wblong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>闭包、立即执行函数和模块化</title>
    <link href="https://wblong.github.io/2019/04/27/JS%E9%97%AD%E5%8C%85%E3%80%81%E7%AB%8B%E5%8D%B3%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://wblong.github.io/2019/04/27/JS闭包、立即模式和模块化/</id>
    <published>2019-04-27T10:17:00.000Z</published>
    <updated>2019-04-27T14:02:59.856Z</updated>
    
    <content type="html"><![CDATA[<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><pre><code>一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</code></pre><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><p>1、函数作为返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//函数声明</span><br><span class="line">function fn()&#123;</span><br><span class="line">var max=10;</span><br><span class="line">   return function bar(x)&#123;</span><br><span class="line">   if(x&gt;max)&#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">//函数表达式</span><br><span class="line">var f1=fu();</span><br><span class="line">f1(15); //print out 15</span><br><span class="line">//执行f(15)时，max变量的取值是10</span><br></pre></td></tr></table></figure></p><p>2、函数作为参数被传递<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var max=10,</span><br><span class="line">fn=function(x)&#123;</span><br><span class="line">    if(x&gt;max)&#123;</span><br><span class="line">        console.log(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">(function(f)&#123;</span><br><span class="line">var max=100;</span><br><span class="line">   f(15);</span><br><span class="line">&#125;)(fn);</span><br><span class="line">/*</span><br><span class="line">执行f(15)时，max变量的取值是10，而不是100</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><pre><code>立即执行函数立即执行，函数体后要有小括号以及函数必须是函数表达式（()、+、-、!等）而不能是函数声明</code></pre><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>1、匿名函数包裹在一个括号运算符中，后面跟一个小括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(test)&#123;</span><br><span class="line">console.log(test); //print out 123</span><br><span class="line">&#125;)(123);</span><br></pre></td></tr></table></figure><p>2、匿名函数后面跟小括号，然后整个包裹在括号运算符中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(test)&#123;</span><br><span class="line">console.log(test);//print out 1234</span><br><span class="line">&#125;(1234));</span><br></pre></td></tr></table></figure><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>1、使用立即执行函数</p><pre><code>使用&quot;立即执行函数&quot;（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var module1 = (function()&#123;</span><br><span class="line"></span><br><span class="line">　　　　var _count = 0;</span><br><span class="line"></span><br><span class="line">　　　　var m1 = function()&#123;</span><br><span class="line">　　　　　　//...</span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　var m2 = function()&#123;</span><br><span class="line">　　　　　　//...</span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　return &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　&#125;)();</span><br><span class="line"> //使用上面的写法，外部代码无法读取内部的_count变量</span><br><span class="line"> console.info(module1._count); //undefined</span><br></pre></td></tr></table></figure><p>2、放大模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　var module1 = (function (mod)&#123;</span><br><span class="line"></span><br><span class="line">　　　　mod.m3 = function () &#123;</span><br><span class="line">　　　　　　//...</span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　return mod;</span><br><span class="line"></span><br><span class="line">　　&#125;)(module1);</span><br><span class="line">//上面的代码为module1模块添加了一个新方法m3()，然后返回新的module1模块。</span><br><span class="line">//宽放大模式</span><br><span class="line">var module1 = ( function (mod)&#123;</span><br><span class="line"></span><br><span class="line">　　　　//...</span><br><span class="line"></span><br><span class="line">　　　　return mod;</span><br><span class="line"></span><br><span class="line">　　&#125;)(window.module1 || &#123;&#125;);</span><br><span class="line">//模块的独立性</span><br><span class="line">　var module1 = (function ($, YAHOO) &#123;</span><br><span class="line"></span><br><span class="line">　　　　//...</span><br><span class="line"></span><br><span class="line">　　&#125;)(jQuery, YAHOO);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。
&lt;/code&gt;&lt;/pr
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://wblong.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wblong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 模块加载</title>
    <link href="https://wblong.github.io/2019/04/27/javascript-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD/"/>
    <id>https://wblong.github.io/2019/04/27/javascript-模块加载/</id>
    <published>2019-04-27T08:50:00.000Z</published>
    <updated>2019-04-27T14:07:21.031Z</updated>
    
    <content type="html"><![CDATA[<p><code>Javascript</code> 模块加载分为浏览器端加载和服务器端加载。</p><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><pre><code>服务器端模块化的规范，Nodejs实现了这种规范。</code></pre><h6 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h6><ul><li>一个单独的JS文件就是一个module，拥有单独的作用域;</li><li>每个单独的module是一个单独的作用域。也就是说在一个文件里定义的变量和函数都是私有，对其他文件不可见，除非用exports导出了;</li><li>通过require来加载模块;</li><li>通过exports和module.exports来暴露模块中的内容。</li></ul><h6 id="CommonJS分为三部分："><a href="#CommonJS分为三部分：" class="headerlink" title="CommonJS分为三部分："></a>CommonJS分为三部分：</h6><ul><li>require 模块加载</li><li>exports 模块导出</li><li>module 模块本身</li></ul><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><p>hello.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.world=function()&#123;</span><br><span class="line">console.log(&apos;Hello World&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var hello=require(&apos;./hello&apos;);</span><br><span class="line">hello.world();</span><br></pre></td></tr></table></figure></p><p>或hello.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Hello() &#123; </span><br><span class="line">    var name; </span><br><span class="line">    this.setName = function(thyName) &#123; </span><br><span class="line">        name = thyName; </span><br><span class="line">    &#125;; </span><br><span class="line">    this.sayHello = function() &#123; </span><br><span class="line">        console.log(&apos;Hello &apos; + name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;; </span><br><span class="line">module.exports = Hello;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var Hello = require(&apos;./hello&apos;); </span><br><span class="line">hello = new Hello(); </span><br><span class="line">hello.setName(&apos;BYVoid&apos;); </span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></table></figure></p><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><pre><code>Asynchronous Module Definition 的缩写，意思是异步模块定义，是一种异步模块加载的规范。主要用于浏览器端的JS加载，为了不造成网络阻塞。只有当依赖的模块加载完毕，才会执行回调。</code></pre><h6 id="规范-1"><a href="#规范-1" class="headerlink" title="规范"></a>规范</h6><pre><code>AMD使用define来定义模块，require来加载模块;AMD允许输出的模块兼容CommonJS;RequireJS是AMD的一种实现。</code></pre><p><em>define(id?, dependencies?, factory);</em></p><ul><li>id：指定义中模块的名字</li><li>dependencies：是一个当前模块依赖的</li><li>factory，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</li></ul><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>1、定义模块 math.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define([&apos;jquery&apos;], function ($) &#123;//引入jQuery模块</span><br><span class="line">    return &#123;</span><br><span class="line">        add: function(x,y)&#123;</span><br><span class="line">            return x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2、调用模块 main.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require([&apos;jquery&apos;,&apos;math&apos;], function ($,math) &#123;</span><br><span class="line">    console.log(math.add(10,100));//110</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3、统一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require([module], callback);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">require([&apos;math&apos;], function (math) &#123;</span><br><span class="line"></span><br><span class="line">　　　　math.add(2, 3);</span><br><span class="line"></span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><h4 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h4><pre><code>Universal Module Definition。把前后端加载糅合在了一起，提供了一个前后端统一的解决方案。支持AMD和CommonJS模式。</code></pre><h6 id="规范-2"><a href="#规范-2" class="headerlink" title="规范"></a>规范</h6><ol><li>先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。</li><li>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</li><li>前两个都不存在，则将模块公开到全局（window或global）</li></ol><h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h6><ul><li>root &lt;– this</li><li>factory &lt;– function (){}</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// if the module has no dependencies, the above pattern can be simplified to</span><br><span class="line">(function (root, factory) &#123;</span><br><span class="line">    if (typeof define === &apos;function&apos; &amp;&amp; define.amd) &#123;</span><br><span class="line">        // AMD. Register as an anonymous module.</span><br><span class="line">        define([], factory);</span><br><span class="line">    &#125; else if (typeof exports === &apos;object&apos;) &#123;</span><br><span class="line">        // Node. Does not work with strict CommonJS, but</span><br><span class="line">        // only CommonJS-like environments that support module.exports,</span><br><span class="line">        // like Node.</span><br><span class="line">        module.exports = factory();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Browser globals (root is window)</span><br><span class="line">        root.returnExports = factory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(this, function () &#123;</span><br><span class="line"></span><br><span class="line">    // Just return a value to define the module export.</span><br><span class="line">    // This example returns an object, but the module</span><br><span class="line">    // can return a function as the exported value.</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><img src="/2019/04/27/javascript-模块加载/images/js_module_load.png" alt="注解"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Javascript&lt;/code&gt; 模块加载分为浏览器端加载和服务器端加载。&lt;/p&gt;
&lt;h4 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://wblong.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wblong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>c++11新增的容器</title>
    <link href="https://wblong.github.io/2019/04/23/c-11%E6%96%B0%E5%A2%9E%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://wblong.github.io/2019/04/23/c-11新增的容器/</id>
    <published>2019-04-23T05:31:00.000Z</published>
    <updated>2019-05-04T03:37:37.036Z</updated>
    
    <content type="html"><![CDATA[<h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;array&gt;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // construction uses aggregate initialization</span><br><span class="line">    std::array&lt;int, 3&gt; a1&#123; &#123;1, 2, 3&#125; &#125;; // double-braces required in C++11 (not in C++14)</span><br><span class="line">    std::array&lt;int, 3&gt; a2 = &#123;1, 2, 3&#125;;  // never required after =</span><br><span class="line">    std::array&lt;std::string, 2&gt; a3 = &#123; std::string(&quot;a&quot;), &quot;b&quot; &#125;;</span><br><span class="line"> </span><br><span class="line">    // container operations are supported</span><br><span class="line">    std::sort(a1.begin(), a1.end());</span><br><span class="line">    std::reverse_copy(a2.begin(), a2.end(), </span><br><span class="line">                      std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; &apos;\n&apos;;</span><br><span class="line"> </span><br><span class="line">    // ranged for loop is supported</span><br><span class="line">    for(const auto&amp; s: a3)</span><br><span class="line">        std::cout &lt;&lt; s &lt;&lt; &apos; &apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unordered-map-amp-unordered-set"><a href="#unordered-map-amp-unordered-set" class="headerlink" title="unordered_map &amp; unordered_set"></a>unordered_map &amp; unordered_set</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;unordered_map.hpp&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line"> </span><br><span class="line">//////////////////////////////////////////////////</span><br><span class="line">// reference: http://en.cppreference.com/w/cpp/container/unordered_map</span><br><span class="line">int test_unordered_map1()</span><br><span class="line">&#123;</span><br><span class="line">// Create an unordered_map of three strings (that map to strings)</span><br><span class="line">std::unordered_map&lt;std::string, std::string&gt; u = &#123;</span><br><span class="line">&#123; &quot;RED&quot;, &quot;#FF0000&quot; &#125;,</span><br><span class="line">&#123; &quot;GREEN&quot;, &quot;#00FF00&quot; &#125;,</span><br><span class="line">&#123; &quot;BLUE&quot;, &quot;#0000FF&quot; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// Iterate and print keys and values of unordered_map</span><br><span class="line">for (const auto&amp; n : u) &#123;</span><br><span class="line">std::cout &lt;&lt; &quot;Key:[&quot; &lt;&lt; n.first &lt;&lt; &quot;] Value:[&quot; &lt;&lt; n.second &lt;&lt; &quot;]\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// Add two new entries to the unordered_map</span><br><span class="line">u[&quot;BLACK&quot;] = &quot;#000000&quot;;</span><br><span class="line">u[&quot;WHITE&quot;] = &quot;#FFFFFF&quot;;</span><br><span class="line"> </span><br><span class="line">// Output values by key</span><br><span class="line">std::cout &lt;&lt; &quot;The HEX of color RED is:[&quot; &lt;&lt; u[&quot;RED&quot;] &lt;&lt; &quot;]\n&quot;;</span><br><span class="line">std::cout &lt;&lt; &quot;The HEX of color BLACK is:[&quot; &lt;&lt; u[&quot;BLACK&quot;] &lt;&lt; &quot;]\n&quot;;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;The u&apos;s size: &quot; &lt;&lt; u.size() &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/////////////////////////////////////////////////////</span><br><span class="line">// reference: http://www.cplusplus.com/reference/unordered_map/unordered_map/at/</span><br><span class="line">typedef std::unordered_map&lt;std::string, std::string&gt; stringmap;</span><br><span class="line"> </span><br><span class="line">stringmap merge(stringmap a, stringmap b) &#123;</span><br><span class="line">stringmap temp(a); temp.insert(b.begin(), b.end()); return temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int test_unordered_map2()</span><br><span class="line">&#123;</span><br><span class="line">////////// at/size</span><br><span class="line">std::unordered_map&lt;std::string, int&gt; mymap = &#123; &#123; &quot;Mars&quot;, 3000 &#125;, &#123; &quot;Saturn&quot;, 60000 &#125;, &#123; &quot;Jupiter&quot;, 70000 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">mymap.at(&quot;Mars&quot;) = 3396;</span><br><span class="line">mymap.at(&quot;Saturn&quot;) += 272;</span><br><span class="line">mymap.at(&quot;Jupiter&quot;) = mymap.at(&quot;Saturn&quot;) + 9638;</span><br><span class="line"> </span><br><span class="line">for (auto&amp; x : mymap) &#123;</span><br><span class="line">std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;mymap.size() is &quot; &lt;&lt; mymap.size() &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">/////////// begin</span><br><span class="line">std::unordered_map&lt;std::string, std::string&gt; mymap2 = &#123; &#123; &quot;Australia&quot;, &quot;Canberra&quot; &#125;, &#123; &quot;U.S.&quot;, &quot;Washington&quot; &#125;, &#123; &quot;France&quot;, &quot;Paris&quot; &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;mymap2 contains:&quot;;</span><br><span class="line">for (auto it = mymap2.begin(); it != mymap2.end(); ++it)</span><br><span class="line">std::cout &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;:&quot; &lt;&lt; it-&gt;second;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;mymap2&apos;s buckets contain:\n&quot;;</span><br><span class="line">for (unsigned i = 0; i &lt; mymap2.bucket_count(); ++i) &#123;</span><br><span class="line">std::cout &lt;&lt; &quot;bucket #&quot; &lt;&lt; i &lt;&lt; &quot; contains:&quot;;</span><br><span class="line">for (auto local_it = mymap2.begin(i); local_it != mymap2.end(i); ++local_it)</span><br><span class="line">std::cout &lt;&lt; &quot; &quot; &lt;&lt; local_it-&gt;first &lt;&lt; &quot;:&quot; &lt;&lt; local_it-&gt;second;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">////////////// bucket</span><br><span class="line">std::unordered_map&lt;std::string, std::string&gt; mymap3 = &#123;</span><br><span class="line">&#123; &quot;us&quot;, &quot;United States&quot; &#125;,</span><br><span class="line">&#123; &quot;uk&quot;, &quot;United Kingdom&quot; &#125;,</span><br><span class="line">&#123; &quot;fr&quot;, &quot;France&quot; &#125;,</span><br><span class="line">&#123; &quot;de&quot;, &quot;Germany&quot; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">for (auto&amp; x : mymap3) &#123;</span><br><span class="line">std::cout &lt;&lt; &quot;Element [&quot; &lt;&lt; x.first &lt;&lt; &quot;:&quot; &lt;&lt; x.second &lt;&lt; &quot;]&quot;;</span><br><span class="line">std::cout &lt;&lt; &quot; is in bucket #&quot; &lt;&lt; mymap3.bucket(x.first) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/////////////// count</span><br><span class="line">std::unordered_map&lt;std::string, double&gt; mymap4 = &#123;</span><br><span class="line">&#123; &quot;Burger&quot;, 2.99 &#125;,</span><br><span class="line">&#123; &quot;Fries&quot;, 1.99 &#125;,</span><br><span class="line">&#123; &quot;Soda&quot;, 1.50 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">for (auto&amp; x : &#123; &quot;Burger&quot;, &quot;Pizza&quot;, &quot;Salad&quot;, &quot;Soda&quot; &#125;) &#123;</span><br><span class="line">if (mymap4.count(x)&gt;0)</span><br><span class="line">std::cout &lt;&lt; &quot;mymap4 has &quot; &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">else</span><br><span class="line">std::cout &lt;&lt; &quot;mymap4 has no &quot; &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">///////////////// erase</span><br><span class="line">std::unordered_map&lt;std::string, std::string&gt; mymap5;</span><br><span class="line"> </span><br><span class="line">// populating container:</span><br><span class="line">mymap5[&quot;U.S.&quot;] = &quot;Washington&quot;;</span><br><span class="line">mymap5[&quot;U.K.&quot;] = &quot;London&quot;;</span><br><span class="line">mymap5[&quot;France&quot;] = &quot;Paris&quot;;</span><br><span class="line">mymap5[&quot;Russia&quot;] = &quot;Moscow&quot;;</span><br><span class="line">mymap5[&quot;China&quot;] = &quot;Beijing&quot;;</span><br><span class="line">mymap5[&quot;Germany&quot;] = &quot;Berlin&quot;;</span><br><span class="line">mymap5[&quot;Japan&quot;] = &quot;Tokyo&quot;;</span><br><span class="line"> </span><br><span class="line">// erase examples:</span><br><span class="line">mymap5.erase(mymap5.begin());      // erasing by iterator</span><br><span class="line">mymap5.erase(&quot;France&quot;);             // erasing by key</span><br><span class="line">mymap5.erase(mymap5.find(&quot;China&quot;), mymap5.end()); // erasing by range</span><br><span class="line"> </span><br><span class="line">// show content:</span><br><span class="line">for (auto&amp; x : mymap5)</span><br><span class="line">std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">////////////////////// find</span><br><span class="line">std::unordered_map&lt;std::string, double&gt; mymap6 = &#123;</span><br><span class="line">&#123; &quot;mom&quot;, 5.4 &#125;,</span><br><span class="line">&#123; &quot;dad&quot;, 6.1 &#125;,</span><br><span class="line">&#123; &quot;bro&quot;, 5.9 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">std::string input;</span><br><span class="line">std::cout &lt;&lt; &quot;who? &quot;;</span><br><span class="line">getline(std::cin, input);</span><br><span class="line"> </span><br><span class="line">std::unordered_map&lt;std::string, double&gt;::const_iterator got = mymap6.find(input);</span><br><span class="line"> </span><br><span class="line">if (got == mymap6.end())</span><br><span class="line">std::cout &lt;&lt; &quot;not found&quot;;</span><br><span class="line">else</span><br><span class="line">std::cout &lt;&lt; got-&gt;first &lt;&lt; &quot; is &quot; &lt;&lt; got-&gt;second;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">//////////////////// insert</span><br><span class="line">std::unordered_map&lt;std::string, double&gt;</span><br><span class="line">myrecipe,</span><br><span class="line">mypantry = &#123; &#123; &quot;milk&quot;, 2.0 &#125;, &#123; &quot;flour&quot;, 1.5 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">std::pair&lt;std::string, double&gt; myshopping(&quot;baking powder&quot;, 0.3);</span><br><span class="line"> </span><br><span class="line">myrecipe.insert(myshopping);                        // copy insertion</span><br><span class="line">myrecipe.insert(std::make_pair&lt;std::string, double&gt;(&quot;eggs&quot;, 6.0)); // move insertion</span><br><span class="line">myrecipe.insert(mypantry.begin(), mypantry.end());  // range insertion</span><br><span class="line">myrecipe.insert(&#123; &#123; &quot;sugar&quot;, 0.8 &#125;, &#123; &quot;salt&quot;, 0.1 &#125; &#125;);    // initializer list insertion</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;myrecipe contains:&quot; &lt;&lt; std::endl;</span><br><span class="line">for (auto&amp; x : myrecipe)</span><br><span class="line">std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">//////////////////// =</span><br><span class="line">stringmap first = &#123; &#123; &quot;AAPL&quot;, &quot;Apple&quot; &#125;, &#123; &quot;MSFT&quot;, &quot;Microsoft&quot; &#125; &#125;;  // init list</span><br><span class="line">stringmap second = &#123; &#123; &quot;GOOG&quot;, &quot;Google&quot; &#125;, &#123; &quot;ORCL&quot;, &quot;Oracle&quot; &#125; &#125;;   // init list</span><br><span class="line">stringmap third = merge(first, second);                      // move</span><br><span class="line">first = third;                                    // copy</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; &quot;first contains:&quot;;</span><br><span class="line">for (auto&amp; elem : first) std::cout &lt;&lt; &quot; &quot; &lt;&lt; elem.first &lt;&lt; &quot;:&quot; &lt;&lt; elem.second;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//////////////////////////////////////////////////////</span><br><span class="line">// reference: http://www.geeksforgeeks.org/unordered_map-in-stl-and-its-applications/</span><br><span class="line">int test_unordered_map3()</span><br><span class="line">&#123;</span><br><span class="line">// key will be of string type and mapped value will be of double type</span><br><span class="line">std::unordered_map&lt;std::string, double&gt; umap;</span><br><span class="line"> </span><br><span class="line">// inserting values by using [] operator</span><br><span class="line">umap[&quot;PI&quot;] = 3.14;</span><br><span class="line">umap[&quot;root2&quot;] = 1.414;</span><br><span class="line">umap[&quot;root3&quot;] = 1.732;</span><br><span class="line">umap[&quot;log10&quot;] = 2.302;</span><br><span class="line">umap[&quot;loge&quot;] = 1.0;</span><br><span class="line"> </span><br><span class="line">// inserting value by insert function</span><br><span class="line">umap.insert(std::make_pair(&quot;e&quot;, 2.718));</span><br><span class="line"> </span><br><span class="line">std::string key = &quot;PI&quot;;</span><br><span class="line"> </span><br><span class="line">// If key not found in map iterator to end is returned</span><br><span class="line">if (umap.find(key) == umap.end()) &#123;</span><br><span class="line">std::cout &lt;&lt; key &lt;&lt; &quot; not found\n\n&quot;;</span><br><span class="line">&#125; else &#123;// If key found then iterator to that key is returned</span><br><span class="line">std::cout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; &quot;\n\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">key = &quot;lambda&quot;;</span><br><span class="line">if (umap.find(key) == umap.end())</span><br><span class="line">std::cout &lt;&lt; key &lt;&lt; &quot; not found\n&quot;;</span><br><span class="line">else</span><br><span class="line">std::cout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">//  iterating over all value of umap</span><br><span class="line">std::unordered_map&lt;std::string, double&gt;::iterator itr;</span><br><span class="line">std::cout &lt;&lt; &quot;\nAll Elements : \n&quot;;</span><br><span class="line">for (itr = umap.begin(); itr != umap.end(); itr++) &#123;</span><br><span class="line">// itr works as a pointer to pair&lt;string, double&gt; type itr-&gt;first stores the key part</span><br><span class="line">// and itr-&gt;second stroes the value part</span><br><span class="line">std::cout &lt;&lt; itr-&gt;first &lt;&lt; &quot;  &quot; &lt;&lt; itr-&gt;second &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非成员begin-end"><a href="#非成员begin-end" class="headerlink" title="非成员begin\end"></a>非成员begin\end</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line"> </span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;int&gt; v = &#123; 3, 1, 4 &#125;;</span><br><span class="line">    auto vi = std::begin(v);</span><br><span class="line">    std::cout &lt;&lt; *vi &lt;&lt; &apos;\n&apos;; </span><br><span class="line"> </span><br><span class="line">    int a[] = &#123; -5, 10, 15 &#125;;</span><br><span class="line">    auto ai = std::begin(a);</span><br><span class="line">    std::cout &lt;&lt; *ai &lt;&lt; &apos;\n&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;array&quot;&gt;&lt;a href=&quot;#array&quot; class=&quot;headerlink&quot; title=&quot;array&quot;&gt;&lt;/a&gt;array&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="C++" scheme="https://wblong.github.io/categories/C/"/>
    
    
      <category term="C++11" scheme="https://wblong.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>git 删除远程分支</title>
    <link href="https://wblong.github.io/2019/02/20/git-%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <id>https://wblong.github.io/2019/02/20/git-删除远程分支/</id>
    <published>2019-02-20T09:38:51.000Z</published>
    <updated>2019-04-27T08:38:39.589Z</updated>
    
    <content type="html"><![CDATA[<p><code>git branch -r</code> 查看远程分支<br><code>git branch -r -d origin/AirportProducts</code> 删除本地远程分支 <code>AirportProducts</code> branch-name<br><code>git push origin :AirportProducts</code> 删除远程仓库的分支 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;git branch -r&lt;/code&gt; 查看远程分支&lt;br&gt;&lt;code&gt;git branch -r -d origin/AirportProducts&lt;/code&gt; 删除本地远程分支 &lt;code&gt;AirportProducts&lt;/code&gt; branch-na
      
    
    </summary>
    
      <category term="Git" scheme="https://wblong.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wblong.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CodeSnippet C language</title>
    <link href="https://wblong.github.io/2019/01/31/CodeSnippet-FILE/"/>
    <id>https://wblong.github.io/2019/01/31/CodeSnippet-FILE/</id>
    <published>2019-01-31T03:32:45.000Z</published>
    <updated>2019-04-27T08:38:39.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用OutputDebugString输出调试信息"><a href="#使用OutputDebugString输出调试信息" class="headerlink" title="使用OutputDebugString输出调试信息"></a>使用OutputDebugString输出调试信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl odprintf(const char* fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">char buf[4096], *p = buf;</span><br><span class="line">va_list args;</span><br><span class="line"></span><br><span class="line">va_start(args, fmt);</span><br><span class="line">p += vsnprintf_s(p, sizeof(buf), _TRUNCATE, fmt, args);</span><br><span class="line">va_end(args);</span><br><span class="line"></span><br><span class="line">while (p &gt; buf  &amp;&amp;  isspace(p[-1]))</span><br><span class="line">*--p = &apos;\0&apos;;</span><br><span class="line">*p++ = &apos;\r&apos;;</span><br><span class="line">*p++ = &apos;\n&apos;;</span><br><span class="line">*p = &apos;\0&apos;;</span><br><span class="line"></span><br><span class="line">OutputDebugString(buf);    //OutputDebugString  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间戳转字符日期"><a href="#时间戳转字符日期" class="headerlink" title="时间戳转字符日期"></a>时间戳转字符日期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void  __cdecl dateprintf(long long timestamp, char*now,int len) </span><br><span class="line">&#123;</span><br><span class="line">struct tm ttime;</span><br><span class="line">localtime_s(&amp;ttime, &amp;timestamp);</span><br><span class="line">strftime(now, len, &quot;%Y-%m-%d %H:%M:%S&quot;, &amp;ttime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按行读取文本文件到map"><a href="#按行读取文本文件到map" class="headerlink" title="按行读取文本文件到map"></a>按行读取文本文件到map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;io.h&gt;</span><br><span class="line"></span><br><span class="line">std::map&lt;CameraId, int&gt; m_recordloc;</span><br><span class="line"></span><br><span class="line">int find_view_by_cid(int cid) &#123;</span><br><span class="line">auto it = m_recordloc.find(cid);</span><br><span class="line">return it != m_recordloc.end() ?</span><br><span class="line">it-&gt;second : 1;</span><br><span class="line">&#125;</span><br><span class="line">void  getRecordLocation() &#123;</span><br><span class="line"></span><br><span class="line">odprintf(&quot;[HK8600] %s\n&quot;, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">if (!_access(&quot;device_tr.dat&quot;, 0)) &#123;</span><br><span class="line">    </span><br><span class="line">odprintf(&quot;[HK8600] %s\n&quot;, &quot;device_tr.dat EXISITS!&quot;);</span><br><span class="line">FILE *file = fopen(&quot;device_tr.dat&quot;, &quot;r&quot;);</span><br><span class="line">if (file != NULL) &#123;</span><br><span class="line">while (!feof(file))</span><br><span class="line">&#123;</span><br><span class="line">int cameraId, reloc;</span><br><span class="line">fscanf(file, &quot;%d,%d&quot;, &amp;cameraId, &amp;reloc);</span><br><span class="line">odprintf(&quot;[HK8600] cameraId:%d;location:%d\n&quot;,cameraId,reloc);</span><br><span class="line">m_recordloc.insert(std::make_pair(cameraId, reloc));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">odprintf(&quot;[HK8600] %s\n&quot;, &quot;Read device_tr.dat FAILED!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">odprintf(&quot;[HK8600] %s\n&quot;,&quot;DOESN&apos;T EXISIT!&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用OutputDebugString输出调试信息&quot;&gt;&lt;a href=&quot;#使用OutputDebugString输出调试信息&quot; class=&quot;headerlink&quot; title=&quot;使用OutputDebugString输出调试信息&quot;&gt;&lt;/a&gt;使用OutputDeb
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>负载均衡算法</title>
    <link href="https://wblong.github.io/2019/01/24/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/"/>
    <id>https://wblong.github.io/2019/01/24/负载均衡算法/</id>
    <published>2019-01-24T06:25:07.000Z</published>
    <updated>2019-04-27T08:38:39.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="轮询算法（round-robin）"><a href="#轮询算法（round-robin）" class="headerlink" title="轮询算法（round-robin）"></a>轮询算法（round-robin）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SERVER_LIST = [</span><br><span class="line">    &apos;10.246.10.1&apos;,</span><br><span class="line">    &apos;10.246.10.2&apos;,</span><br><span class="line">    &apos;10.246.10.3&apos;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def round_robin(server_lst, cur = [0]):</span><br><span class="line">    length = len(server_lst)</span><br><span class="line">    ret = server_lst[cur[0] % length]</span><br><span class="line">    cur[0] = (cur[0] + 1) % length</span><br><span class="line">    return ret</span><br></pre></td></tr></table></figure><h2 id="加权轮询算法（weight-round-robin）"><a href="#加权轮询算法（weight-round-robin）" class="headerlink" title="加权轮询算法（weight round-robin）"></a>加权轮询算法（weight round-robin）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">WEIGHT_SERVER_LIST = &#123;</span><br><span class="line">    &apos;10.246.10.1&apos;: 1,</span><br><span class="line">    &apos;10.246.10.2&apos;: 3,</span><br><span class="line">    &apos;10.246.10.3&apos;: 2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def weight_round_robin(servers, cur = [0]):</span><br><span class="line">    weighted_list = []</span><br><span class="line">    //[ &apos;10.246.10.1&apos;,10.246.10.2&apos;,10.246.10.2&apos;,10.246.10.2&apos;,&apos;10.246.10.3&apos;,&apos;10.246.10.3&apos;]</span><br><span class="line">    for k, v in servers.iteritems():</span><br><span class="line">        weighted_list.extend([k] * v)</span><br><span class="line"></span><br><span class="line">    length = len(weighted_list)</span><br><span class="line">    ret = weighted_list[cur[0] % length]</span><br><span class="line">    cur[0] = (cur[0] + 1) % length</span><br><span class="line">    return ret</span><br></pre></td></tr></table></figure><h2 id="随机算法（random）"><a href="#随机算法（random）" class="headerlink" title="随机算法（random）"></a>随机算法（random）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def random_choose(server_lst):</span><br><span class="line">    import random</span><br><span class="line">    random.seed()</span><br><span class="line">    return random.choice(server_lst)</span><br></pre></td></tr></table></figure><h2 id="加权随机算法（random）"><a href="#加权随机算法（random）" class="headerlink" title="加权随机算法（random）"></a>加权随机算法（random）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def weight_random_choose(servers):</span><br><span class="line">    import random</span><br><span class="line">    random.seed()</span><br><span class="line">    weighted_list = []</span><br><span class="line">    for k, v in servers.iteritems():</span><br><span class="line">        weighted_list.extend([k] * v)</span><br><span class="line">    return random.choice(weighted_list)</span><br></pre></td></tr></table></figure><h2 id="归一化-概率"><a href="#归一化-概率" class="headerlink" title="归一化(概率)"></a>归一化(概率)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def normalize_servers(servers):</span><br><span class="line">    normalized_servers = &#123;&#125;</span><br><span class="line">    total = sum(servers.values())</span><br><span class="line">    cur_sum = 0</span><br><span class="line">    for k, v in servers.iteritems():</span><br><span class="line">        normalized_servers[k] = 1.0 * (cur_sum + v) / total</span><br><span class="line">        cur_sum += v</span><br><span class="line">    return normalized_servers</span><br><span class="line"></span><br><span class="line">def weight_random_choose_ex(normalized_servers):</span><br><span class="line">    import random, operator</span><br><span class="line">    random.seed()</span><br><span class="line">    rand = random.random()</span><br><span class="line">    //按照归一化加权值排序</span><br><span class="line">    for k, v in sorted(normalized_servers.iteritems(), key = operator.itemgetter(1)):</span><br><span class="line">        if v &gt;= rand:</span><br><span class="line">            return k</span><br><span class="line">    else:</span><br><span class="line">        assert False, &apos;Error normalized_servers with rand %s &apos; % rand</span><br></pre></td></tr></table></figure><h2 id="哈希法（hash）"><a href="#哈希法（hash）" class="headerlink" title="哈希法（hash）"></a>哈希法（hash）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//同一个请求能够分配到同样的服务节点，这对于“有状态”的服务很有必要</span><br><span class="line"> def hash_choose(request_info, server_lst):</span><br><span class="line">     hashed_request_info = hash(request_info)</span><br><span class="line">     return server_lst[hashed_request_info % len(server_lst)]</span><br></pre></td></tr></table></figure><h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><h2 id="最少连接算法（least-connection）"><a href="#最少连接算法（least-connection）" class="headerlink" title="最少连接算法（least connection）"></a>最少连接算法（least connection）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;轮询算法（round-robin）&quot;&gt;&lt;a href=&quot;#轮询算法（round-robin）&quot; class=&quot;headerlink&quot; title=&quot;轮询算法（round-robin）&quot;&gt;&lt;/a&gt;轮询算法（round-robin）&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
      <category term="algorithm" scheme="https://wblong.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://wblong.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python venv</title>
    <link href="https://wblong.github.io/2019/01/20/python-venv/"/>
    <id>https://wblong.github.io/2019/01/20/python-venv/</id>
    <published>2019-01-20T13:56:42.000Z</published>
    <updated>2019-01-20T14:16:29.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><h2 id="配置Anaconda-包源"><a href="#配置Anaconda-包源" class="headerlink" title="配置Anaconda 包源"></a>配置Anaconda 包源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="使用Anaconda"><a href="#使用Anaconda" class="headerlink" title="使用Anaconda"></a>使用Anaconda</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//列出安装包</span><br><span class="line">conda list </span><br><span class="line">//列出python虚拟环境</span><br><span class="line">conda env list</span><br><span class="line">//创建一个python虚拟环境python3.5</span><br><span class="line">conda create -n python3.5 python=3.5</span><br><span class="line">//激活python3.5虚拟环境</span><br><span class="line">activate python3.5</span><br><span class="line">//为python3.5虚拟环境安装virtualenv环境</span><br><span class="line">conda install -n python3.5 virtualenv</span><br><span class="line">//解除虚拟环境</span><br><span class="line">deactivate</span><br><span class="line">//删除python3.5虚拟环境</span><br><span class="line">conda remove -n python3.5 --all</span><br><span class="line">conda remove --name python3.5 virtualenv</span><br></pre></td></tr></table></figure><h2 id="切换安装32位和64包"><a href="#切换安装32位和64包" class="headerlink" title="切换安装32位和64包"></a>切换安装32位和64包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//切换到32位版本</span><br><span class="line">set CONDA_FORCE_32BIT=1</span><br><span class="line">//切换到64位版本</span><br><span class="line">set CONDA_FORCE_32BIT=</span><br><span class="line">// 查看环境信息</span><br><span class="line">conda info</span><br></pre></td></tr></table></figure><h2 id="python包管理"><a href="#python包管理" class="headerlink" title="python包管理"></a>python包管理</h2><blockquote><p>基本原则是使用Anconda管理多个版本的python环境，使用pip及virtualenv管理python环境的副本及三方库。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//anaconda 管理python多版本切换</span><br><span class="line">conda create -n python3.5 python=3.5</span><br><span class="line">active python3.5</span><br><span class="line">pip install virtualenv</span><br><span class="line">// 纯净python环境</span><br><span class="line">virtualenv --no-site-packages venv </span><br><span class="line">/venv/Script/activate</span><br><span class="line">//备份三方python包</span><br><span class="line">pip freeze &gt; requirement.txt</span><br><span class="line">//批量安装python三方包</span><br><span class="line">pip install -r requirement.txt</span><br><span class="line">/venv/Script/deactivate</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Anaconda&quot;&gt;&lt;a href=&quot;#安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda&quot;&gt;&lt;/a&gt;安装Anaconda&lt;/h2&gt;&lt;h2 id=&quot;配置Anaconda-包源&quot;&gt;&lt;a href=&quot;#配置Anacon
      
    
    </summary>
    
      <category term="python" scheme="https://wblong.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://wblong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>multi-hexo-writing</title>
    <link href="https://wblong.github.io/2019/01/07/multi-hexo-writing/"/>
    <id>https://wblong.github.io/2019/01/07/multi-hexo-writing/</id>
    <published>2019-01-07T03:35:02.000Z</published>
    <updated>2019-01-20T13:54:44.485Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装nodejs环境"><a href="#安装nodejs环境" class="headerlink" title="安装nodejs环境"></a>安装nodejs环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install nodejs</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="克隆远程GIT到本地"><a href="#克隆远程GIT到本地" class="headerlink" title="克隆远程GIT到本地"></a>克隆远程GIT到本地</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone xxxx.git</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装nodejs环境&quot;&gt;&lt;a href=&quot;#安装nodejs环境&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs环境&quot;&gt;&lt;/a&gt;安装nodejs环境&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="Hexo" scheme="https://wblong.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wblong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Tips</title>
    <link href="https://wblong.github.io/2019/01/06/hexo_tips/"/>
    <id>https://wblong.github.io/2019/01/06/hexo_tips/</id>
    <published>2019-01-06T01:56:12.303Z</published>
    <updated>2019-01-20T13:54:53.183Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="https://wblong.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wblong.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
